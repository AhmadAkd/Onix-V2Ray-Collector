name: V2Ray Config Collector & Tester

on:
  schedule:
    # Ÿáÿ± 30 ÿØŸÇ€åŸÇŸá ÿßÿ¨ÿ±ÿß ÿ¥ŸàÿØ
    - cron: '*/30 * * * *'
  workflow_dispatch:
  # push:
  #   branches: [ main ]  # ÿ∫€åÿ±ŸÅÿπÿßŸÑ - ŸÅŸÇÿ∑ ÿ®ÿß schedule Ÿà manual

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: v2ray-collection
  cancel-in-progress: false  # ŸÖŸÜÿ™ÿ∏ÿ± ÿ®ŸÖÿßŸÜÿØ ÿ™ÿß workflow ŸÇÿ®ŸÑ€å ÿ™ŸÖÿßŸÖ ÿ¥ŸàÿØ

jobs:
  collect-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests aiohttp pyyaml schedule psutil flask
        
    - name: Create directories
      run: |
        mkdir -p subscriptions logs
        echo "üìÅ Directories created"
        ls -la
        
    - name: Run V2Ray Config Collector (Test)
      run: |
        echo "üß™ Testing config collector..."
        python -c "
        from config_collector import V2RayCollector
        import asyncio
        
        async def test():
            collector = V2RayCollector()
            print(f'üìä Sources count: {len(collector.config_sources)}')
            
            # Test a few sources
            test_sources = collector.config_sources[:5]
            for source in test_sources:
                try:
                    configs = await collector.fetch_configs_from_source(source)
                    print(f'‚úÖ {source}: {len(configs)} configs')
                except Exception as e:
                    print(f'‚ùå {source}: Error - {e}')
        
        asyncio.run(test())
        "
        
    - name: Check for problematic sources
      run: |
        echo "üîç Checking for problematic sources..."
        python -c "
        from config_collector import V2RayCollector
        collector = V2RayCollector()
        
        problematic_sources = []
        for source in collector.config_sources:
            if 'roosterkid/openproxylist' in source:
                problematic_sources.append(source)
        
        if problematic_sources:
            print('‚ùå Problematic sources found:')
            for source in problematic_sources:
                print(f'   - {source}')
            exit(1)
        else:
            print('‚úÖ No problematic sources found')
        "
        
    - name: Generate subscription files
      run: |
        python -c "
        import asyncio
        import os
        import json
        from config_collector import V2RayCollector
        
        async def main():
            print('üöÄ ÿ¥ÿ±Ÿàÿπ ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å Ÿà ÿ™ÿ≥ÿ™ ⁄©ÿßŸÜŸÅ€å⁄Ø‚ÄåŸáÿß...')
            collector = V2RayCollector()
            
            # ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å ⁄©ÿßŸÜŸÅ€å⁄Ø‚ÄåŸáÿß
            raw_configs = await collector.collect_all_configs()
            print(f'üì• {len(raw_configs)} ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ¨ŸÖÿπ‚Äåÿ¢Ÿàÿ±€å ÿ¥ÿØ')
            
            # ÿ™ÿ≥ÿ™ ⁄©ÿßŸÜŸÅ€å⁄Ø‚ÄåŸáÿß ÿ®ÿß ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å ŸÅŸàŸÇ ÿ≥ÿ±€åÿπ
            await collector.test_all_configs_ultra_fast(raw_configs, max_concurrent=100)
            print(f'‚úÖ {len(collector.working_configs)} ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ≥ÿßŸÑŸÖÿå {len(collector.failed_configs)} ŸÜÿßÿ≥ÿßŸÑŸÖ')
            
            # ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å
            categories = collector.categorize_configs()
            
            # ÿ™ŸàŸÑ€åÿØ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿßÿ¥ÿ™ÿ±ÿß⁄©
            subscription_files = collector.generate_subscription_links(categories)
            
            # ÿ∞ÿÆ€åÿ±Ÿá ŸÅÿß€åŸÑ‚ÄåŸáÿß
            os.makedirs('subscriptions', exist_ok=True)
            
            for protocol, file_info in subscription_files.items():
                with open(file_info['filename'], 'w', encoding='utf-8') as f:
                    f.write(file_info['content'])
                print(f'üìÑ {file_info[\"filename\"]} - {file_info[\"count\"]} ⁄©ÿßŸÜŸÅ€å⁄Ø')
            
            # ÿ™ŸàŸÑ€åÿØ ⁄Øÿ≤ÿßÿ±ÿ¥
            report = collector.generate_report()
            with open('subscriptions/latest_report.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            
            print('üéâ ÿ™ŸÖÿßŸÖ ŸÅÿß€åŸÑ‚ÄåŸáÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ŸàŸÑ€åÿØ ÿ¥ÿØŸÜÿØ')
        
        asyncio.run(main())
        "
        
    - name: Verify subscription files
      run: |
        echo "üîç Checking subscription files..."
        if [ -d "subscriptions" ]; then
          echo "‚úÖ subscriptions directory exists"
          ls -la subscriptions/
          if [ -f "subscriptions/all_subscription.txt" ]; then
            echo "‚úÖ all_subscription.txt exists"
          else
            echo "‚ùå all_subscription.txt missing"
            echo "# Placeholder" > subscriptions/all_subscription.txt
          fi
        else
          echo "‚ùå subscriptions directory missing"
          mkdir -p subscriptions
          echo "# Placeholder" > subscriptions/all_subscription.txt
        fi
        
    # Note: index.html and dashboard.html are now maintained in the repository
    # They should not be overwritten by the workflow
        
    - name: Upload subscription files
      uses: actions/upload-artifact@v4
      with:
        name: v2ray-subscriptions
        path: subscriptions/
        if-no-files-found: error
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add subscriptions/ index.html
        
        # ÿ®ÿ±ÿ±ÿ≥€å ÿ™ÿ∫€å€åÿ±ÿßÿ™
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "ü§ñ Auto-update V2Ray configs $(date '+%Y-%m-%d %H:%M:%S')" || exit 0
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # ÿ™ŸÑÿßÿ¥ ÿ®ÿ±ÿß€å push ÿ®ÿß retry
        for i in {1..5}; do
          if git push origin main; then
            echo "‚úÖ Push successful"
            exit 0
          else
            echo "‚ö†Ô∏è Push failed, attempt $i/5"
            
            # Fetch latest changes
            git fetch origin main
            
            # Reset to remote and reapply our changes
            git reset --soft origin/main
            git add subscriptions/ index.html
            git commit --amend --no-edit || git commit -m "ü§ñ Auto-update V2Ray configs $(date '+%Y-%m-%d %H:%M:%S')"
            
            sleep 3
          fi
        done
        
        echo "‚ùå Push failed after 5 attempts"
        exit 1
