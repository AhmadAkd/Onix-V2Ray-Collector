name: V2Ray Config Collector & Tester

on:
  schedule:
    # Ÿáÿ± 30 ÿØŸÇ€åŸÇŸá ÿßÿ¨ÿ±ÿß ÿ¥ŸàÿØ
    - cron: '*/30 * * * *'
  workflow_dispatch:
  # push:
  #   branches: [ main ]  # ÿ∫€åÿ±ŸÅÿπÿßŸÑ - ŸÅŸÇÿ∑ ÿ®ÿß schedule Ÿà manual

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: v2ray-collection
  cancel-in-progress: false  # ŸÖŸÜÿ™ÿ∏ÿ± ÿ®ŸÖÿßŸÜÿØ ÿ™ÿß workflow ŸÇÿ®ŸÑ€å ÿ™ŸÖÿßŸÖ ÿ¥ŸàÿØ

jobs:
  collect-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create directories
      run: |
        mkdir -p subscriptions logs
        echo "üìÅ Directories created"
        ls -la
        
    - name: Run V2Ray Config Collector (Test)
      run: |
        echo "üß™ Testing config collector..."
        python -c "
        from config_collector import V2RayCollector
        import asyncio
        
        async def test():
            collector = V2RayCollector()
            print(f'üìä Sources count: {len(collector.config_sources)}')
            
            # Test a few sources
            test_sources = collector.config_sources[:5]
            for source in test_sources:
                try:
                    configs = await collector.fetch_configs_from_source(source)
                    print(f'‚úÖ {source}: {len(configs)} configs')
                except Exception as e:
                    print(f'‚ùå {source}: Error - {e}')
        
        asyncio.run(test())
        "
        
    - name: Verify sources accessibility
      run: |
        echo "üîç Verifying sources accessibility..."
        python -c "
        from config_collector import V2RayCollector
        collector = V2RayCollector()
        print(f'‚úÖ Loaded {len(collector.config_sources)} sources successfully')
        "
        
    - name: Run full collection cycle
      run: |
        echo "üöÄ ÿßÿ¨ÿ±ÿß€å Collection Cycle ⁄©ÿßŸÖŸÑ..."
        python run_collection.py
        
    - name: Verify subscription files
      run: |
        echo "üîç Checking subscription files..."
        if [ -d "subscriptions" ]; then
          echo "‚úÖ subscriptions directory exists"
          ls -la subscriptions/
          if [ -f "subscriptions/all_subscription.txt" ]; then
            echo "‚úÖ all_subscription.txt exists"
          else
            echo "‚ùå all_subscription.txt missing"
            echo "# Placeholder" > subscriptions/all_subscription.txt
          fi
        else
          echo "‚ùå subscriptions directory missing"
          mkdir -p subscriptions
          echo "# Placeholder" > subscriptions/all_subscription.txt
        fi
        
    # Note: index.html and dashboard.html are now maintained in the repository
    # They should not be overwritten by the workflow
        
    - name: Upload subscription files
      uses: actions/upload-artifact@v4
      with:
        name: v2ray-subscriptions
        path: subscriptions/
        if-no-files-found: error
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add subscriptions/
        
        # ÿ®ÿ±ÿ±ÿ≥€å ÿ™ÿ∫€å€åÿ±ÿßÿ™
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "ü§ñ Auto-update V2Ray configs $(date '+%Y-%m-%d %H:%M:%S')" || exit 0
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # ÿ™ŸÑÿßÿ¥ ÿ®ÿ±ÿß€å push ÿ®ÿß retry
        for i in {1..3}; do
          if git push origin main; then
            echo "‚úÖ Push successful"
            exit 0
          else
            echo "‚ö†Ô∏è Push failed, attempt $i/3"
            
            # Fetch latest changes
            git fetch origin main
            
            # Use rebase to handle conflicts better
            if git rebase origin/main; then
              echo "‚úÖ Rebase successful, retrying push..."
            else
              echo "‚ö†Ô∏è Rebase failed, aborting..."
              git rebase --abort
              # Try force push as last resort (only for subscription files)
              if [ $i -eq 3 ]; then
                echo "üö® Last attempt: force push subscription files only"
                git push origin main --force-with-lease
                exit 0
              fi
            fi
            
            sleep 5
          fi
        done
        
        echo "‚ùå Push failed after 5 attempts"
        exit 1
